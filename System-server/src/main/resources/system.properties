sql.achievement={\
  insert:'INSERT INTO achievement (description, name) \
  VALUES (?, ?);', \
  update:'UPDATE achievement SET description = ?, name = ? \
  WHERE id = ?;', \
  getAll:'SELECT achievement_id,description, achievement.name as achievement_name, \
  achievement_condition.id as achievement_condition_id, operator, value, achievement_characteristic_id, \
  achievement_characteristic.name as achievement_characteristic_name, script \
  FROM achievement \
  INNER JOIN achievement_condition ON achievement.id = achievement_condition.achievement_id \
  INNER JOIN achievement_characteristic \
  ON achievement_condition.achievement_characteristic_id = achievement_characteristic.id;',\
  getNewUserAchievements:'SELECT us.id as user_id, ''0'' as id, ? as achievement_id FROM users as us WHERE us.role=''user'' AND %s '\
}
sql.achievementCharacteristic={\
  insert:'INSERT INTO achievement_characteristic (name, script) \
  VALUES (?, ?);', \
  update:'UPDATE achievement_condition SET name = ?, script = ? \
  WHERE id = ?;'\
}
sql.achievementCondition={\
  insert:'INSERT INTO achievement_condition (operator, value, achievement_id, achievement_characteristic_id) \
  VALUES (cast(? AS condition_operator), ?, ?, ?);', \
  insertAchievementConditions:'INSERT INTO achievement_condition (operator, value, achievement_id, achievement_characteristic_id) VALUES', \
  deleteAchievementConditions:'DELETE FROM achievement_condition WHERE id IN (%s);',\
  update:'UPDATE achievement_condition \
  SET operator = cast(? AS condition_operator), value = ?, achievement_id = ?, achievement_characteristic_id = ? \
  WHERE id = ?;'\
}
sql.userAchievements={\
  insert:'INSERT INTO user_achievements_list (user_id, achievement_id, achievement_date) \
  VALUES (?, ?,  NOW());',\
  deleteUserAchievements:'DELETE FROM user_achievements_list WHERE id IN (%s);', \
  insertUserAchievements:'INSERT INTO user_achievements_list (user_id, achievement_id, achievement_date) VALUES ',\
  getAchievementsByUserId:'SELECT achievement.id as id, description, achievement.name as name \
  FROM user_achievements_list \
  INNER JOIN achievement on user_achievements_list.achievement_id = achievement.id \
  WHERE user_id = ?;',\
  getAchievementsForAll:'SELECT user_id, achievement.id as achievement_id, id \
  FROM user_achievements_list \
  INNER JOIN achievement on user_achievements_list.achievement_id = achievement.id;' \
  }
sql.announcement={\
  insert:'INSERT INTO announcement (author_id, is_published, title, subtitle, full_text, created_date, image_id) \
  VALUES(?, ?, ?, ?, ?, NOW(), ?);',\
  update:'UPDATE announcement SET is_published = ?, title = ?, subtitle = ?, full_text = ?, image_id = ? \
  WHERE id = ?;',\
  getAllInfo:'SELECT a.id, a.author_id, a.is_published, a.title, a.subtitle, a.full_text, a.created_date, \
  i.id as image_id, i.src, u.login as author_login \
  FROM announcement a LEFT JOIN image i ON a.image_id = i.id INNER JOIN users u ON a.author_id = u.id;',\
  rowCount:'SELECT count(id) AS row_count FROM announcement;',\
  loginRowCount:'SELECT count(a.id) AS row_count \
  FROM announcement a INNER JOIN users u ON a.author_id = u.id WHERE u.login = ?;',\
  idRowCount:'SELECT count(id) AS row_count FROM announcement WHERE author_id = ?;'}
sql.chat={\
  insert:'INSERT INTO chat (name, creation_date) VALUES(?, NOW());',\
  update:'UPDATE chat SET name = ? WHERE id = ?;',\
  addChatMember:'INSERT INTO chat_members (chat_id, user_id) VALUES(?, ?);',\
  removeChatMember:'DELETE FROM chat_members WHERE chat_id = ? AND user_id = ?;',\
  getUsersChat:'SELECT * FROM chat LEFT JOIN chat_members cm ON chat.id = cm.chat_id WHERE user_id = ?;',\
  getGroupChat:'SELECT * FROM chat WHERE name = ? FETCH FIRST ROW ONLY;',\
  getFullInfo:'SELECT * FROM chat LEFT JOIN chat_members cm ON chat.id = cm.chat_id LEFT JOIN users u ON cm.user_id = u.id left join image i on u.image_id = i.id;',\
  getFullInfoForUser:'SELECT * FROM chat LEFT JOIN chat_members cm ON chat.id = cm.chat_id LEFT JOIN users u ON cm.user_id = u.id left join image i on u.image_id = i.id \
  WHERE chat.id IN (SELECT chat_id FROM chat LEFT JOIN chat_members cm ON chat.id = cm.chat_id WHERE user_id = ?);',\
  checkChatAffiliation:'SELECT count(*) AS row_count FROM chat_members WHERE chat_id = ? AND user_id = ?;'\
  }
sql.message={\
  insert:'insert into message (chat_id, author_id, creation_date, message_text) VALUES (?,?,now(),?);',\
  update:'UPDATE message SET chat_id = ?, author_id = ?, message_text = ? WHERE id = ?;',\
  getMessagesFromChat:'SELECT * FROM message join users u on message.author_id = u.id left join image i on u.image_id = i.id WHERE chat_id = ? ORDER BY creation_date DESC;',\
  getById:'SELECT * FROM message join users u on message.author_id = u.id left join image i on u.image_id = i.id WHERE message.id = ?;',\
  rowCount:'SELECT count(message.id) AS row_count FROM message join users u on message.author_id = u.id left join image i on u.image_id = i.id WHERE chat_id = ?;'\
  }
sql.dashboard={\
  createTemporaryTable: 'CREATE TEMP TABLE dates_table \
ON COMMIT drop \
AS \
(select date(published_date) as date \
from quiz \
union \
select date(created_date) as date \
from quiz);',\
  getAmountOfPublishedQuizzes:'select dates_table.date, \
tabl2.created, \
count(date(q.published_date)) as published \
from dates_table \
left join quiz q on dates_table.date = date(q.published_date) \
inner join \
(select dates_table.date, count(date(q1.created_date)) as created \
from dates_table \
left join quiz q1 on dates_table.date = date(q1.created_date) \
group by dates_table.date) as tabl2 on tabl2.date = dates_table.date \
group by dates_table.date, tabl2.created \
order by dates_table.date;',\
  getStatisticOfQuizzesPlayed:'select distinct (q.name), count(*) over(partition by q.id) from take_quiz tq inner join quiz q on tq.quiz_id = q.id;',\
  getFriendsPreferences:'select distinct c.name, count(*) over (partition by c.id) from users left join friendlist f on users.id = f.friend_id left join take_quiz tq on users.id = tq.user_id left join quiz q on tq.quiz_id = q.id inner join category c on q.category_id = c.id where f.user_id=?;',\
  getComparedScores:'select * from (select q.id, q.name, tq.score, users.id userId, max(tq.score) over (partition by q.id) record from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id where tq.is_completed) as tabl where tabl.userId=?;',\
  getCompletedQuizzesInEachCategoryByLogin:'select distinct (category_id), c.name, count(*) over (partition by category_id) as count from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id inner join category c on q.category_id = c.id where users.login=? and tq.is_completed;',\
  getPercentOfCorrectAnswersById:'select q.name,tq.correct_answers_persentage from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id where users.id=? and tq.is_completed;',\
  getMaxScoreById:'select q.name, take_date, score from take_quiz inner join quiz q on take_quiz.quiz_id = q.id where take_quiz.score=(select max(tq.score) as max_score from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id where users.id=? and tq.is_completed);',\
  getTopUsers:'select * from users left join image on (users.image_id=image.id) where total_score is not null order by total_score desc limit ?;',\
  getBestUserByQuizId:'select * from users left join image on (users.image_id=image.id) inner join take_quiz tq on users.id = tq.user_id where score=(select max(score) from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id where q.id=? and tq.is_completed);',\
  getStatisticInTheCategoryById:'select category_id, c.name, tq.take_date,  count(*) over (partition by category_id order by tq.take_date) as count from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id inner join category c on q.category_id = c.id where users.id=? and tq.is_completed;'\
  }
sql.generic={\
  getAll:'SELECT * FROM %s;',\
  get:'SELECT * FROM %s WHERE id = ?;',\
  delete:'DELETE FROM %s WHERE id = ?;'\
  }
sql.tokens={\
  saveToken:'INSERT INTO system_action_tokens (token, token_type, user_id, expired_date) \
  VALUES (?,  cast(? AS system_action_token_type), ?, NOW() + interval ''1 day'');',\
  getByUserId:'SELECT * FROM system_action_tokens WHERE user_id=?;',\
  getUserId:'SELECT user_id FROM system_action_tokens WHERE token=? AND token_type=cast(? AS system_action_token_type) AND expired_date > NOW();',\
  deleteOld:'DELETE FROM system_action_tokens WHERE expired_date<now();'\
  }
sql.question={\
  insert:'INSERT INTO question (quiz_id, type, content, image_id) VALUES(?, cast(? AS question_type), ?, ?);',\
  update:'UPDATE question SET quiz_id = ?, type = cast(? AS question_type), content = ?, image_id = ? WHERE id = ?;',\
  getByQuizId:'SELECT * FROM question WHERE quiz_id = ?',\
  deleteQuestions:'DELETE FROM question WHERE id IN'\
  }
sql.questionOption={\
  insert:'INSERT INTO question_option (question_id, content, is_correct, sequence_order, image_id) VALUES(?, ?, ?, ?, ?);',\
  update:'UPDATE question_option SET question_id = ?, content = ?, is_correct = ?, sequence_order = ?, image_id = ? WHERE id = ?;',\
  getByQuestionId:'SELECT * FROM question_option WHERE question_id = ?;'}
sql.category={\
  insert:'INSERT INTO category (name) VALUES(?);',\
  update:'UPDATE category SET name = ? WHERE id = ?;',\
  getCategoryById:'SELECT * FROM category WHERE id = ?'}
sql.tag={\
  insert:'INSERT INTO tag (name) VALUES(?);',\
  update:'UPDATE tag SET name = ? WHERE id = ?;',\
  getByQuizId:'SELECT tag.id, tag.name FROM quiz INNER JOIN quiz_tag ON quiz.id = quiz_tag.quiz_id INNER JOIN tag ON quiz_tag.tag_id = tag.id WHERE quiz.id = ?;',\
  getIdByName:'SELECT id FROM tag WHERE name = ?'}
sql.image={\
  insert:'INSERT INTO image (src) VALUES(?);',\
  update:'UPDATE image SET src = ? WHERE id = ?;',\
  getIdBySrc:'SELECT id FROM image WHERE src = ?'\
  }
sql.friendList={\
 caseNewQuiz: 'SELECT friend_id FROM friendlist INNER JOIN notification_settings on notification_settings.user_id = friend_id \
  WHERE friendlist.user_id = ? AND notification_settings.new_quiz = true; ', \
 caseNewAnnouncement: 'SELECT friend_id FROM friendlist INNER JOIN notification_settings on notification_settings.user_id = friend_id \
  WHERE friendlist.user_id = ? AND notification_settings.new_announcement = true; ', \
 caseGameInvitation: 'SELECT friend_id FROM friendlist INNER JOIN notification_settings on notification_settings.user_id = friend_id \
  WHERE friendlist.user_id = ? AND notification_settings.game_invitation = true; ', \
 caseFriendInvitation:'SELECT friend_id FROM friendlist INNER JOIN notification_settings on notification_settings.user_id = friend_id \
  WHERE friendlist.user_id = ? AND notification_settings.friend_invitation = true; ',\
  caseIsNewAnnouncement: 'SELECT new_announcement FROM notification_settings WHERE user_id = ?;',\
  caseIsCreatedQuiz: 'SELECT new_quiz FROM notification_settings WHERE user_id = ?;',\
  caseIsGameInvitation: 'SELECT game_invitation FROM notification_settings WHERE user_id = ?;',\
  caseIsFriendInvitation: 'SELECT friend_invitation FROM notification_settings WHERE user_id = ?;',\
 caseMessage:'SELECT user_id FROM chat_members WHERE chat_id = ?;'}
sql.game={\
  getUsersByGameId:'SELECT * FROM user WHERE game_id = ? ORDER BY score DESC;',\
  getCurrentQuestionByGameId:'SELECT * FROM game_questions WHERE game_id = ? AND is_current = true;',\
  getAnswersToCurrentQuestionByGameId:'SELECT game_questions.id AS game_question_id, game_questions.game_id AS game_id, \
  game_questions.is_current AS is_current, game_questions.finish_time AS finish_time,  question.id AS question_id, question.quiz_id AS quiz_id, question.type AS type, \
  question.content AS content, question.score AS question_score, question.image_id AS question_image, answer.id AS answer_id, answer.percent AS percent, \
  answer.time AS time, user.id AS user_id, user.login AS login, user.registered_id AS register_id, user.score AS user_score, \
  user.combo_answer AS combo_answer \
  FROM game_questions \
  INNER JOIN question ON (question.id = game_questions.question_id) \
  INNER JOIN answer ON (question.id = answer.question_id) \
  INNER JOIN user ON (user.id = answer.user_id) \
  WHERE game_questions.is_current = true AND game_questions.game_id=? AND answer.game_id=game_questions.game_id;',\
  getQuestionById:'SELECT question.id AS question_id, question.quiz_id AS quiz_id, question.type AS type, \
  question.content AS question_content, question.score AS question_score,\
  question.image_id as question_image_id, question_image.src as question_image_src,\
  question_option.id as id_option, question_option.content as content_option, question_option.is_correct as is_correct_option, sequence_order AS sequence,\
  question_option.image_id as option_id_image, option_image.src as option_image \
  FROM question \
  LEFT JOIN question_option ON (question.id=question_option.question_id) \
  LEFT JOIN image AS question_image ON (question.image_id = question_image.id) \
  LEFT JOIN image AS option_image ON (question_option.image_id = option_image.id)  \
  WHERE question.id = ?;',\
  getHostId:'SELECT user.id AS host_id FROM game_questions LEFT JOIN question ON (question.id = game_questions.question_id) LEFT JOIN answer ON (question.id = answer.question_id) LEFT JOIN user ON (user.id = answer.user_id) WHERE game_questions.game_id= ? AND user.is_host = true;',\
  saveUser:'INSERT INTO user (game_id, login, registered_id) VALUES (?, ?, ?);',\
  saveAnswer:'INSERT INTO answer (user_id, percent, question_id, time, game_id) VALUES (?, ?, ?, ?, ?);',\
  saveSettings:'INSERT INTO settings (game_id, time, question_answer_sequence, combo, intermediate_result, quick_answer_bonus) VALUES (?, ?, ?, ?, ?, ?);',\
  saveQuiz:'INSERT INTO quiz (id, name, question_number, image_id) VALUES (?, ?, ?, ?);',\
  saveQuestion:'INSERT INTO question (id, quiz_id, type, content, score, image_id) VALUES(?, ?, ?, ?, ?, ?);',\
  saveOption:'INSERT INTO question_option (id, question_id, content, is_correct, sequence_order, image_id) VALUES(?, ?, ?, ?, ?, ?);',\
  multipleSaveOption:'INSERT INTO question_option (id, question_id, content, is_correct, sequence_order, image_id) VALUES ',\
  saveImage:'INSERT INTO image (id, src) VALUES(?, ?);',\
  saveGameQuestion:'INSERT INTO game_questions (game_id, question_id) VALUES (?, ?);',\
  saveGame:'INSERT INTO game (game_id, quiz_id, host_id) VALUES (?, ?, ?);',\
  updateGameQuestion:'UPDATE game_questions SET game_id = ?, question_id = ?, is_current = ?, finish_time = ? WHERE id = ?;',\
  deleteGame:'DELETE FROM game WHERE game_id = ?;',\
  getGame:'SELECT * FROM game INNER JOIN settings ON (game.game_id=settings.game_id) WHERE game.game_id=?;',\
  updateUser:'UPDATE user SET game_id = ?, login = ?, registered_id = ?, score =?, combo_answer = ? WHERE id = ?;',\
  updateGameQuestionToCurrent:'UPDATE game_questions SET is_current = ? WHERE id = ?;',\
  deleteGameQuestion:'DELETE FROM game_questions WHERE id = ?;',\
  updateUserToHost:'UPDATE user SET is_host = ? WHERE id = ?;',\
  getGameQuestion:'SELECT * FROM game_questions WHERE game_id = ? LIMIT 1 OFFSET ?;',\
  getCountGameQuestion:'SELECT count(id) FROM game_questions WHERE game_id = ?;',\
  getUserById:'SELECT * FROM user WHERE id =?;',\
  multipleSaveOptionsImage:'INSERT INTO image (id, src) VALUES ',\
  multipleSaveQuestion:'INSERT INTO question (id, quiz_id, type, content, score, image_id) VALUES ',\
  getExistImage:'SELECT * FROM image WHERE id IN '\
  }
userName.characteristic=Active,Calm,High,Big,Happy,Beautiful,Strong,Curious,Friendly,Hardy,Kind,Peaceful,Small,Long,Young,Strong,Fast
userName.animals=armadillo,bat,bison,buffalo,capybara,echidna,emu,hyena,hystrix,iguana,jellyfish,koala,lemur,llama,mandrill,mole,orangutan,ostrich,owl,panther,raccoon,seahorse,skunk,termite,toucan,turkey,walrus,weasel,whale,woodpecker,yak
sql.group={\
  insert:'INSERT INTO "group" (name, author_id, invitation_code, creation_date) VALUES(?, ?, ?, NOW());',\
  update:'UPDATE "group" SET name = ? WHERE id = ?;',\
  addGroupMember:'INSERT INTO group_members (group_id, user_id) VALUES(?, ?);',\
  removeGroupMember:'DELETE FROM group_members WHERE group_id = ? AND user_id = ?;',\
  getByCode:'select * from "group" WHERE invitation_code = ?;',\
  getUsersGroup:'SELECT distinct g.* FROM "group" g LEFT JOIN group_members cm ON g.id = cm.group_id WHERE author_id = ? or user_id = ?;',\
  getFullInfoForUser:'SELECT u.*, i.src FROM "group" g LEFT JOIN group_members cm ON g.id = cm.group_id LEFT JOIN users u ON cm.user_id = u.id left join image i on u.image_id = i.id \
  WHERE g.id = ?;'\
  }
sql.notification={\
  insert:'INSERT INTO notification (user_id, is_viewed, author, action, author_link, action_link, is_message) VALUES(?, ?, ?, ?, ?, ?, ?);',\
  update:'UPDATE notification SET user_id = ?, is_viewed = ?, author = ?, action = ?, author_link = ?, action_link = ?, is_message = ?  WHERE id = ?;',\
  getAllInfo:'SELECT id, user_id, is_viewed, author, action, author_link, action_link, is_message \
  FROM notification ;',\
  getByUserId:'SELECT n.id, n.user_id, n.is_viewed, n.author, n.action, n.author_link, n.action_link, n.is_message \
  FROM notification n WHERE n.user_id = ? AND is_message = false;',\
  deleteAllByUserId:'DELETE FROM notification WHERE user_id = ?;',\
  getMessages:'SELECT id, user_id, is_viewed, author, action, author_link, action_link, is_message FROM notification WHERE user_id = ? AND is_message = true;',\
  deleteOldNotifications:"DELETE FROM notification WHERE creation_date < NOW() - INTERVAL '14 days';"\
  }
sql.notificationSettings={\
  insert:'INSERT INTO notification_settings (new_quiz, new_announcement, game_invitation, friend_invitation, user_id) \
  VALUES(?, ?, ?, ?, ?);',\
  update:'UPDATE notification_settings SET new_quiz = ?, new_announcement = ?, game_invitation = ?, friend_invitation = ?, user_id = ?\
  WHERE id = ?;',\
  getByUserId:'SELECT new_quiz, new_announcement, game_invitation, friend_invitation, user_id \
  FROM notification_settings WHERE user_id = ?;',\
  getSettingsByUserId:'SELECT id, new_quiz, new_announcement, game_invitation, friend_invitation, user_id FROM notification_settings WHERE user_id = ?;'\
  }
sql.quiz={\
  insert:'INSERT INTO quiz (name, author_id, category_id, status, published_date, updated_date, created_date, questions_number, max_score, image_id, description) VALUES (?, ?, ?, cast(? AS quiz_status), ?, ?, NOW(), ?, ?, ?, ?);',\
  update:'UPDATE quiz SET name = ?, author_id = ?, category_id = ?, status = cast(? AS quiz_status), published_date = ?, updated_date = ?, created_date = ?, questions_number = ?, max_score = ?, image_id = ?, description = ? WHERE id = ?;',\
  rowCountByStatus:'SELECT count(id) AS row_count FROM quiz WHERE status = cast(? AS quiz_status);',\
  rowCount:'SELECT count(quiz.id) AS row_count FROM quiz  ;',\
  nameRowCount:'SELECT count(id) AS row_count FROM quiz WHERE name = ?;',\
  getPageByStatus:'SELECT * AS row_count FROM quiz WHERE status = cast(? AS quiz_status) LIMIT ? OFFSET ?;',\
  getPageByName:'SELECT * FROM quiz WHERE name = ? LIMIT ? OFFSET ?;',\
  addTag:'INSERT INTO quiz_tag (quiz_id, tag_id) VALUES(?,?);',\
  getFullInfo:'select quiz.id as quiz_id, quiz.name as quiz_name, description, author_id, category_id, category.name as category_name,\
  quiz.status, published_date, updated_date, created_date, questions_number, max_score, quiz.image_id as quiz_image_id,\
  quiz_image.src as quiz_image_src, question.id as question_id,question.type as question_type,question.content as question_content,\
  question.score as question_score, question.image_id as question_image_id, question_image.src as question_image_src,\
  question_option.id as option_id, question_option.content as option_content, question_option.is_correct as option_is_correct,\
  sequence_order, question_option.image_id as option_image_id, option_image.src as option_image_src, tag_id, tag.name as tag_name \
  from quiz \
  left join category on quiz.category_id = category.id \
  left join image quiz_image on quiz.image_id = quiz_image.id \
  left join question on quiz.id = question.quiz_id \
  left join image question_image on question.image_id = question_image.id \
  left join question_option on question.id = question_option.question_id \
  left join image option_image on question_option.image_id = option_image.id \
  left join quiz_tag on quiz.id = quiz_tag.quiz_id \
  left join tag on quiz_tag.tag_id = tag.id;',\
  caseId:' WHERE quiz.id IN (  ); ', \
  caseAll:' LIMIT ? OFFSET ?;',\
  caseName:' quiz.name ILIKE ?  ',\
  caseAuthor:' users.login ILIKE ?  ',\
  caseCategory:' category.name IN (  ) ',\
  caseDate:' published_date BETWEEN ? AND ? ',\
  caseTag:' tag.name IN (  ) ', \
  caseStatus: ' quiz.status::quiz_status IN (  ) ', \
  authorJoin:' JOIN users ON  quiz.author_id = users.id ',\
  countJoin:' JOIN users ON  quiz.author_id = users.id \
  LEFT JOIN category ON quiz.category_id = category.id ', \
  countJoinTag:' LEFT JOIN quiz_tag ON quiz.id = quiz_tag.quiz_id  \
    LEFT JOIN tag ON quiz_tag.tag_id = tag.id ', \
  counter:'SELECT count(id) AS row_count FROM quiz;',\
  removeTag:'DELETE FROM quiz_tag WHERE quiz_id=? AND tag_id=?',\
  isUsersFavorite:'SELECT user_id FROM favorite_mark WHERE user_id=? AND quiz_id=?; ',\
  getQuizId:'SELECT DISTINCT quiz.id AS quiz_id \
  FROM quiz \
  LEFT JOIN category ON quiz.category_id = category.id \
  LEFT JOIN image quiz_image ON quiz.image_id = quiz_image.id \
  LEFT JOIN question ON quiz.id = question.quiz_id \
  LEFT JOIN image question_image ON question.image_id = question_image.id \
  LEFT JOIN question_option ON question.id = question_option.question_id \
  LEFT JOIN image option_image ON question_option.image_id = option_image.id \
  LEFT JOIN quiz_tag ON quiz.id = quiz_tag.quiz_id \
  LEFT JOIN tag ON quiz_tag.tag_id = tag.id ' ,\
  quizCount:' SELECT COUNT(DISTINCT quiz.id) AS quiz_id \
  FROM quiz \
  LEFT JOIN category ON quiz.category_id = category.id \
  LEFT JOIN image quiz_image ON quiz.image_id = quiz_image.id \
  LEFT JOIN question ON quiz.id = question.quiz_id \
  LEFT JOIN image question_image ON question.image_id = question_image.id \
  LEFT JOIN question_option ON question.id = question_option.question_id \
  LEFT JOIN image option_image ON question_option.image_id = option_image.id \
  LEFT JOIN quiz_tag ON quiz.id = quiz_tag.quiz_id \
  LEFT JOIN tag ON quiz_tag.tag_id = tag.id ',\
  getCreatedQuizzesPageByUserId:' select * from quiz q inner join image i on q.image_id = i.id where author_id = ? LIMIT ? OFFSET ?; ',\
  getCompletedQuizzesPageByUserId:'select q.id, \
  q.name, \
  q.author_id, \
  q.category_id, \
  q.status, \
  q.published_date, \
  q.updated_date, \
  q.created_date, \
  q.questions_number, \
  q.max_score, \
  q.image_id, \
  q.description, \
  i.src \
  from take_quiz \
  inner join quiz q on take_quiz.quiz_id = q.id \
  inner join image i on q.image_id = i.id \
  where user_id = ? \
  and is_completed LIMIT ? OFFSET ?;',\
  getFavouriteQuizzesPageByUserId:'select q.id, \
  q.name, \
  q.author_id, \
  q.category_id, \
  q.status, \
  q.published_date, \
  q.updated_date, \
  q.created_date, \
  q.questions_number, \
  q.max_score, \
  q.image_id, \
  q.description, \
  i.src \
  from favorite_mark \
  inner join quiz q on favorite_mark.quiz_id = q.id \
  inner join image i on q.image_id = i.id \
  where user_id = ? LIMIT ? OFFSET ?;',\
  getFavouriteMarkByUserIdAndQuizId:'SELECT (CASE \
  WHEN (select user_id from favorite_mark where user_id = ? and quiz_id = ?) is null THEN \
  false \
  ELSE \
  true \
  END) as is_favourite;',\
  getRowCountOfCompletedQuizzes:'SELECT count(id) AS row_count from take_quiz inner join quiz q on take_quiz.quiz_id = q.id where user_id=? and is_completed;',\
  getRowCountOfCreatedQuizzes:'select count(id) as row_count from quiz where author_id=?;',\
  getRowCountOfFavouriteQuizzes:'SELECT count(q.id) as row_count from favorite_mark inner join quiz q on favorite_mark.quiz_id = q.id where user_id=?;',\
  updateQuizStatus:'update quiz set status=cast(? as quiz_status) where id=?;',\
  updateQuizStatusToPublished:'update quiz set status=cast(? as quiz_status), published_date=NOW() where id=?;',\
  markAsFavorite:'INSERT INTO favorite_mark (quiz_id, user_id, mark_date) VALUES(?,?, NOW());',\
  unmarkAsFavorite:'DELETE FROM favorite_mark WHERE user_id=? AND quiz_id=?;'\
  }
sql.suggestions={\
  getEmail:'select distinct tabl.login, tabl.email from( select users.login, users.email, count(*) over(partition by users.id) as tagsCount from users inner join take_quiz tq on users.id = tq.user_id inner join quiz q on tq.quiz_id = q.id inner join quiz_tag qt on q.id = qt.quiz_id inner join tag t on qt.tag_id = t.id where qt.tag_id in (select t.id from quiz_tag inner join quiz q on quiz_tag.quiz_id = q.id inner join tag t on quiz_tag.tag_id = t.id where q.id=?) and q.id!=?) as tabl where tabl.tagsCount>=2;'\
  }
sql.takeQuiz={\
  insert:'INSERT INTO take_quiz (user_id, quiz_id, is_completed, score, correct_answers_persentage, take_date) VALUES(?, ?, ?, ?, ?, NOW());',\
  update:'UPDATE take_quiz SET score=?, correct_answers_persentage=?, take_date=NOW() WHERE user_id=? AND quiz_id=?;',\
  rowCount:'SELECT count(*) AS row_count FROM take_quiz WHERE user_id = ?;',\
  getAllInfo:'SELECT * FROM take_quiz WHERE user_id = ?;',\
  getQuizResultByUser:'SELECT * FROM take_quiz WHERE user_id=? AND quiz_id=?;'\
  }
sql.users={\
  insert:'INSERT INTO users (login, password, email, status, role, first_name, second_name, registered_date, profile, total_score, image_id) VALUES (?, ?, ?, cast(? AS profile_status), cast(? AS user_role), ?, ?, NOW(), ?, ?, ?);',\
  selectByMail:'SELECT * FROM users u LEFT JOIN image i ON u.image_id = i.id WHERE email=?;',\
  update:'UPDATE users SET login = ?, password = ?, email = ?, status = cast(? AS profile_status), role = cast(? AS user_role), first_name = ?, second_name = ?, registered_date = ?, profile = ?, total_score =?, image_id = ? WHERE id = ?;',\
  updateUserPhoto:'update users set image_id=? where id=?;',\
  rowCount:'SELECT count(id) AS row_count FROM users WHERE role = cast(? AS user_role);',\
  getPageByRole:'SELECT * FROM users u LEFT JOIN image i ON u.image_id = i.id WHERE role = cast(? AS user_role) LIMIT ? OFFSET ?;',\
  getAllUsersPage:'SELECT * FROM users u LEFT JOIN image i ON u.image_id = i.id LIMIT ? OFFSET ?;',\
  allUsersCount:'SELECT count(id) FROM users;',\
  selectByLoginAndPassword:'SELECT * FROM users u LEFT JOIN image i ON u.image_id = i.id WHERE login=? AND password=?;',\
  selectByLogin:'SELECT * FROM users u LEFT JOIN image i ON u.image_id = i.id WHERE login=?;',\
  getTopUsers:'select * from users where total_score is not null order by total_score desc limit ?;',\
  searchUsersByLogin:'SELECT u.id, u.login, u.password, u.email, u.status, u.role, u.first_name, u.second_name, u.registered_date, u.profile, u.total_score, i.id as image_id, i.src \
  FROM users u LEFT JOIN image i ON u.image_id = i.id WHERE LOWER(u.login) LIKE LOWER(?);',\
  countRowsForSearchByLogin:'SELECT count(*) AS row_count FROM users WHERE LOWER(login) LIKE LOWER(?);',\
  getAllUsers:'select * from users left join image on (users.image_id=image.id);',\
  getUser:'select * from users left join image on (users.image_id=image.id) where users.id=?;',\
  updateUserStatus:'UPDATE users SET status = cast(? AS profile_status) WHERE id = ?',\
  updateUserScore:'UPDATE users SET total_score = ? WHERE id = ?',\
  getLanguage:'SELECT language from users where id = ?',\
  updateLanguage:'UPDATE users SET language = cast(? AS lang) WHERE id=?',\
  changePassword:'UPDATE users SET password=? where login=?;'\
  }
sql.friends={\
  addUserFriend:'INSERT INTO friendlist (user_id, friend_id, add_date) VALUES (?, ?, NOW());',\
  deleteUserFriend:'DELETE FROM friendlist WHERE user_id=? AND friend_id=?;',\
  getUserFriends:'SELECT u.id, u.login, u.password, u.email, u.status, u.role, u.first_name, u.second_name, u.registered_date, u.profile, u.total_score, i.id as image_id, i.src \
  FROM friendlist fl INNER JOIN users u LEFT JOIN image i ON u.image_id = i.id ON fl.friend_id = u.id WHERE fl.user_id = ?;',\
  rowCount:'SELECT count(users.id) AS row_count FROM friendlist INNER JOIN users ON friendlist.friend_id = users.id WHERE friendlist.user_id=?;',\
  checkFriendship:'SELECT count(*) AS row_count FROM friendlist WHERE user_id = ? AND friend_id = ?;'\
  }
sql.friendsActivity={\
  getAllFriendsActivity:"SELECT frlist.id, login, src, activity_id, activity_content, date, type \
  FROM (SELECT fl.user_id AS user_id, fl.id, friend_id AS activity_id, friend_login AS activity_content, ffl.add_date AS date, \'friend\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT friendlist.user_id AS fid, friendlist.friend_id AS friend_id, users.login AS friend_login, friendlist.add_date \
  FROM friendlist INNER JOIN users ON friendlist.friend_id = users.id) AS ffl ON fl.id = fid \
  UNION ALL \
  SELECT fl.user_id   AS user_id, fl.id, quiz_id AS activity_id, quiz_name AS activity_content, fm.mark_date AS date, \'mark\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT favorite_mark.user_id, quiz.id   AS quiz_id, quiz.name AS quiz_name, favorite_mark.mark_date \
  FROM favorite_mark INNER JOIN quiz on favorite_mark.quiz_id = quiz.id) AS fm ON fl.id = fm.user_id \
  UNION ALL \
  SELECT fl.user_id AS user_id, fl.id, q.id AS activity_id, q.name AS activity_content, q.published_date AS date, \'quiz\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN quiz q ON q.author_id = fl.id AND q.published_date NOTNULL \
  UNION ALL \
  SELECT fl.user_id AS user_id, fl.id, achievement_id AS activity_id, achievement_name AS activity_content, a.achievement_date AS date, \'achievement\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT ual.user_id, achievement.id   AS achievement_id, achievement.name AS achievement_name, ual.achievement_date \
  FROM user_achievements_list ual INNER JOIN achievement ON ual.achievement_id = achievement.id) AS a ON a.user_id = fl.id) AS frlist \
  INNER JOIN users ON frlist.id = users.id INNER JOIN image i ON users.image_id = i.id \
  WHERE user_id = ? ORDER BY date DESC;",\
  allRowCount:"SELECT count(id) AS row_count FROM ( \
  SELECT frlist.id FROM (SELECT fl.user_id AS user_id, fl.id FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT friendlist.user_id   AS fid, friendlist.friend_id AS friend_id, friendlist.add_date FROM friendlist) AS ffl ON fl.id = fid \
  UNION ALL \
  SELECT fl.user_id AS user_id, fl.id FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT favorite_mark.user_id, favorite_mark.quiz_id AS quiz_id FROM favorite_mark) AS fm ON fl.id = fm.user_id \
  UNION ALL \
  SELECT fl.user_id AS user_id, fl.id FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN quiz q ON q.author_id = fl.id AND q.published_date NOTNULL \
  UNION ALL \
  SELECT fl.user_id AS user_id, fl.id FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT ual.user_id, ual.achievement_id AS achievement_id FROM user_achievements_list ual) AS a ON a.user_id = fl.id) AS frlist \
  WHERE user_id = ?) AS fa",\
  addFriendPart:" SELECT fl.user_id AS user_id, fl.id, friend_id AS activity_id, friend_login AS activity_content, ffl.add_date AS date, \'friend\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN (SELECT friendlist.user_id AS fid, friendlist.friend_id AS friend_id, users.login AS friend_login, friendlist.add_date \
  FROM friendlist INNER JOIN users ON friendlist.friend_id = users.id) AS ffl ON fl.id = fid ",\
  markQuizPart:" SELECT fl.user_id AS user_id, fl.id, quiz_id AS activity_id, quiz_name AS activity_content, fm.mark_date AS date, \'mark\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl \
  INNER JOIN (SELECT favorite_mark.user_id, quiz.id   AS quiz_id, quiz.name AS quiz_name, favorite_mark.mark_date FROM favorite_mark INNER JOIN quiz on favorite_mark.quiz_id = quiz.id) AS fm ON fl.id = fm.user_id ",\
  publishQuizPart:" SELECT fl.user_id AS user_id, fl.id, q.id AS activity_id, q.name AS activity_content, q.published_date AS date, \'quiz\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl INNER JOIN quiz q ON q.author_id = fl.id AND q.published_date NOTNULL ",\
  achievementPart:" SELECT fl.user_id AS user_id, fl.id, achievement_id AS activity_id, achievement_name AS activity_content, a.achievement_date AS date, \'achievement\' AS type \
  FROM (SELECT friendlist.user_id, friendlist.friend_id AS id FROM friendlist) AS fl \
  INNER JOIN (SELECT ual.user_id, achievement.id AS achievement_id, achievement.name AS achievement_name, ual.achievement_date \
  FROM user_achievements_list ual INNER JOIN achievement ON ual.achievement_id = achievement.id) AS a ON a.user_id = fl.id ",\
  activitySelectStart:"SELECT frlist.id, login, src, activity_id, activity_content, date, type FROM (",\
  activitySelectEnd:") AS frlist INNER JOIN users ON frlist.id = users.id INNER JOIN image i ON users.image_id = i.id WHERE user_id = ? ORDER BY date DESC;",\
  activityCountStart:"SELECT count(id) AS row_count FROM (",\
  activityCountEnd:") AS frlist WHERE user_id = ?;"\
  }
